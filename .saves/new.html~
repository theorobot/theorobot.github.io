<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="slides.css" rel="stylesheet" type="text/css" />
</head>

<body onload="plotSineInit();smoothMovementInit();polarInit()">

<div class="slideshow-container">

<div class="slide">
  <h1>Trigonometry for Game Develepment</h1>
  <h1>By: Theo McGee</h1>
  <canvas id="theoCanvas" width="720" height="300">
    <script>
    //No script
    </script>
  </canvas>
</div>

<div class="slide">
  <h1> Introduction </h1>
  <p>In this project, I explore how trigonometry is used in game development.</p>
</div>

<div class="slide">
<h1> Background </h1> 
 <canvas id="canvas" width="720" height="300">
   <script type="text/javascript">
    let canvas1, context1;
    let xoffset, yoffset, theta;
    let stop1;
    let thetaChange;
    let y;
    function plotSineInit() {
      canvas1 = document.getElementById("canvas");
      context1 = canvas1.getContext("2d");
      context1.strokeStyle = "blue";
      xoffset = 120;
      yoffset = 150;
      theta = 0;
      stop1 = false;
      context1.beginPath();
      context1.moveTo(xoffset, yoffset);
      document.addEventListener('keydown', onPlotClick, false);
      plotLoop();
    }	
    function plotLoop() {
      y = 20 * Math.sin(theta/10);
      context1.lineTo(xoffset + theta, yoffset + y);
      context1.stroke();
      if (theta < 360) {
        theta += 1;
        window.requestAnimationFrame(plotLoop);
      }
    }
    function onPlotClick(event) {
        stop1 = !stop1;
if (!stop1) {
window.requestAnimationFrame(plotLoop);
context1.clearRect(0, 0, 720, 360);
theta = 0;
context1.beginPath();
context1.moveTo(xoffset, yoffset);
} else  {
// context1.clearRect(0,0,720,360);
// theta = 0;
// context1.beginPath();
// context1.moveTo(xoffset, yoffset);
window.requestAnimationFrame(plotLoop);
}
		}
</script>
</canvas>
</div>

<div class="slide">
	<h1> Sine, cosine, and tangent waves </h1>
	<h1> <img src="img/trig_waves.png"> </h1>
</div>

<div class="slide">
<h1>Examples of smooth movement using trigonometry</h1>
	<p>Sine waves are used to control smooth movements of objects.</p>
	<p>The top robot moves at a constant speed and the movement is not smooth.
	  The movement of the top robot is controlled by the following code: 
	<div style="white-space: pre">
		if (x == 500 | x == 0) {
			direction *= -1
		}
		x += direction * 5;
	</div>
	
	<p>The bottom robot uses a sine wave so it moves faster in the middle and slower near the edges.</p>
	It is controlled by the following code: 
	<div style="white-space: pre">
		var x2 = 250 * Math.sin(time * 0.5 * Math.PI) + 250;
		time += 0.02;
	</div>
    <canvas id="myCanvas2" width="720" height = "480">
      <script>

	// declare global variables
	let canvas, context, image;
	let x, direction;  // position and direction for robot 1
	let time;          // timer for robot 2
	let stop;

	// initialize variables and start game loop
	function smoothMovementInit() {
	    canvas = document.getElementById("myCanvas2");
	    context = canvas.getContext("2d");
            image = new Image();
	    image.src = "img/Robot.png";
	    x = 250;
	    direction = 1;
	    time = 0;
	    stop = false;
	    draw(250, 0);
	    draw(250, 200);
	    stop = true;
	    window.requestAnimationFrame(gameLoop);
	}

	// main game loop
	function gameLoop() {
	    // draw robot 1: zigzag motion
	    if (x == 500 | x == 0) {
		direction *= -1
            }
            x += direction * 5;
	    draw(x, 0);

	    // draw robot 2: sine motion
	    var x2 = 250 * Math.sin(time * 0.5 * Math.PI) + 250;
	    time += 0.02;
      draw(x2, 200);

	    // call next iteraton of game loop
	    if (!stop) {
				window.requestAnimationFrame(gameLoop);
	    }
	}

	// draw picture
	function draw(x, y) {
	    context.drawImage(image, x, y, 300, 200);    
	}

	// toggle value of "stop" flag on mouse click
	function onclick(event) {
	    stop = !stop;
	    if (!stop) {
		window.requestAnimationFrame(gameLoop);
	    }	
	}
	
      </script>
      </canvas>
</div>

<div class="slide">
 <h1>Polar Coordinates</h1>
    <p>On a computer screen, a position of an object uses cartesian coordinates(x, y). But if you want circular movement, you can use polar coordinates. Instead of x and y, it is the radius and the angle. In order to represent the position of the object moving in a circular way, you have to translate the polar coordinates to cartesian coordinates. The formula for converting polar coordinates into cartesian coordinates is x = (radius * (cosine(angle)) and y = (radius * (sine(angle)) </p>
	<canvas id="myCanvas3" width="720" height = "640">
	<script>
		let angle, radius;
	  let canvas3, context3, image3;
	  let stop3;
	
	  function draw3(x, y){
	  	context3.drawImage(image3, x, y, 300, 200)
	  }
		function polarInit() {
	  	canvas3 = document.getElementById("myCanvas3");
	    context3 = canvas3.getContext("2d");
	    image3 = new Image();
	    image3.src = "img/Robot.png";
	    angle = 0;
	    radius = 200;
		  stop3 = false;
			draw3(200, 170);
	    document.addEventListener('click', onPolarClick, false);
	    window.requestAnimationFrame(main);
		}
		function main() {
	   	angle += 2;
	    x3 = 200 + (radius * (Math.cos(angle * Math.PI / 180)))
	   	y3 = 170 + (radius * (Math.sin(angle * Math.PI / 180)))
	    draw3(x3, y3)
			if (!stop3) {
				window.requestAnimationFrame(main);
			}
		}
	function onPolarClick(event) {
		stop3 = !stop3;
	  if (!stop3) {
			window.requestAnimationFrame(main);
	  }	
	}
	</script>
	</canvas>
</div>

<a class="prev" onclick="plusSlides(-1)">&#10094;</a>
<a class="next" onclick="plusSlides(1)">&#10095;</a>
</div>
<br>

<div style="text-align:center">
  <span class="dot" onclick="currentSlide(1)"></span> 
  <span class="dot" onclick="currentSlide(2)"></span> 
  <span class="dot" onclick="currentSlide(3)"></span> 
  <span class="dot" onclick="currentSlide(4)"></span> 
  <span class="dot" onclick="currentSlide(5)"></span> 
  <span class="dot" onclick="currentSlide(6)"></span> 
</div>

<script src="slides.js"></script>

</body>
</html> 

